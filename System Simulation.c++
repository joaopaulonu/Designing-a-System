#include <iostream>
#include <cmath>
using namespace std;

// Estrutura para representar o material
struct Material {
    string name;
    double tensileStrength; // Limite de resist√™ncia (MPa)
    double elasticity;      // M√≥dulo de elasticidade (GPa)
};

// Estrutura para representar a barra
struct Bar {
    double length;      // Comprimento (m)
    double area;        // √Årea da se√ß√£o transversal (m¬≤)
    Material material;  // Material
};

// Fun√ß√£o que calcula tens√£o
double calculateStress(double force, double area) {
    return force / area; // F√≥rmula œÉ = F / A
}

// Fun√ß√£o que calcula acelera√ß√£o
double calculateAcceleration(double force, double mass) {
    return force / mass; // F√≥rmula a = F / m
}

int main() {
    // Definindo material
    Material steel = {"Steel", 400, 210}; // 400 MPa, 210 GPa

    // Criando barra
    Bar bar;
    bar.length = 2.0;   // metros
    bar.area = 0.01;    // m¬≤
    bar.material = steel;

    // For√ßa aplicada
    double force = 3000; // Newtons
    double mass = 50;    // kg

    // C√°lculos
    double stress = calculateStress(force, bar.area) / 1e6; // convertido para MPa
    double acceleration = calculateAcceleration(force, mass);

    // Sa√≠da
    cout << "=== System Simulation ===" << endl;
    cout << "Material: " << bar.material.name << endl;
    cout << "Applied Force: " << force << " N" << endl;
    cout << "Stress: " << stress << " MPa" << endl;
    cout << "Acceleration: " << acceleration << " m/s¬≤" << endl;

    if (stress > bar.material.tensileStrength) {
        cout << "‚ö†Ô∏è WARNING: Stress exceeds material strength. Failure expected!" << endl;
    } else {
        cout << "‚úÖ Safe: Stress is within material limits." << endl;
    }

    return 0;
}

// üìä What this project demonstrates:

//  Kinematics: indirect result on displacement (related to acceleration and time).

//Dynamics: use of Newton's Second Law (F = m ¬∑ a).

//Material Strength: compares stress with the material's limit.
